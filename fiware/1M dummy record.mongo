//To be runned inside mongosh

// Connect to the MongoDB database
use orion


// Define a function to generate random coordinates
function getRandomCoordinates() {
  return [
    parseFloat((Math.random() * 360 - 180).toFixed(6)), // Longitude: -180 to 180
    parseFloat((Math.random() * 180 - 90).toFixed(6))   // Latitude: -90 to 90
  ];
}

// Initialize a counter for sequential IDs
let idCounter = 1;

// Define a function to generate sequential IDs
function getSequentialId() {
  return "urn:ngsi-ld:Device:Battery" + idCounter.toString().padStart(6, '0');
}

// Get current timestamp
function getTimestamp() {
  return Date.now() / 1000;
}

// Create an array to hold the documents
let documents = [];

// Generate one million documents
for (let i = 0; i < 1000000; i++) {
  let timestamp = getTimestamp();
  let coordinates = getRandomCoordinates();
  documents.push({
    _id: {
      id: getRandomId(),
      type: "BatteryFunky",
      servicePath: "/"
    },
    attrNames: [
      "category",
      "Geppett",
      "chargingStatus",
      "location",
      "houseId",
      "geppetto",
      "fishName"
    ],
    attrs: {
      category: {
        value: "battery",
        type: "Text",
        creDate: timestamp,
        modDate: timestamp,
        mdNames: []
      },
      Geppett: {
        value: "miao",
        type: "whatever",
        creDate: timestamp,
        modDate: timestamp,
        mdNames: []
      },
      chargingStatus: {
        value: "discharging",
        type: "Text",
        creDate: timestamp,
        modDate: timestamp,
        mdNames: []
      },
      location: {
        value: {
          type: "Point",
          coordinates: coordinates
        },
        type: "geo:json",
        creDate: timestamp,
        modDate: timestamp,
        mdNames: []
      },
      houseId: {
        value: "house" + Math.floor(Math.random() * 1000),
        type: "String",
        creDate: timestamp,
        modDate: timestamp,
        mdNames: []
      },
      geppetto: {
        value: "miao",
        type: "String",
        creDate: timestamp,
        modDate: timestamp,
        mdNames: []
      },
      fishName: {
        value: ["Marcello", "Ermenegisto"],
        type: "List",
        creDate: timestamp,
        modDate: timestamp,
        mdNames: []
      }
    },
    creDate: timestamp,
    modDate: timestamp,
    location: {
      attrName: "location",
      coords: {
        type: "Point",
        coordinates: coordinates
      }
    },
    lastCorrelator: "3585f980-2f14-11ef-b0b4-0242ac130003"
  });

  // Insert in batches of 1000 to avoid memory issues
  if (documents.length === 1000) {
    db.entities.insertMany(documents);
    documents = [];
  }
}

// Insert any remaining documents
if (documents.length > 0) {
  db.entities.insertMany(documents);
}
